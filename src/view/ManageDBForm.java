package view;

import controller.Controller;
import static covid19stats.Covid19Stats.mainForm;
import java.util.List;
import javax.swing.JOptionPane;
import model.Country;
import model.Coviddata;

public class ManageDBForm extends javax.swing.JFrame {

    //Ο επιλεγμένος τύπος δεδομένων (χρονοσειρά)
    //(μπορεί να έχει τιμή deaths, confirmed ή recovered)
    private String timeSeries;
    //Το json με τα στοιχεία θανάτων
    private String jsonDeaths;
    //το json με τα στοιχεία ασθενών που έχουν ανακάμψει
    private String jsonRecovered;
    //το json με τα επιβεβαιωμένα κρούσματα
    private String jsonConfirmed;

    public ManageDBForm() {
        initComponents();
        //Αρχικοποίηση κειμένων στα στοιχεία της φόρμας
        jLabel1.setText("Επιλογή Είδους Δεδομένων:");
        jComboBox1.addItem("deaths");
        jComboBox1.addItem("recovered");
        jComboBox1.addItem("confirmed");
        jButton1.setText("Εισαγωγή χωρών");
        jButton2.setText("Εισαγωγή δεδομένων");
        jButton3.setText("Διαγραφή δεδομένων");
        jButton4.setText("Διαγραφή χωρών");
        jButton5.setText("Επιστροφή");
        //Ενημέρωση του επιλεγμένου τύπου δεδομένων από το comboBox1 
        timeSeries = jComboBox1.getSelectedItem().toString();
        //Ενημέρωση για το πλήθος αποθηκευμένων εγγραφών στη βάση δεδομένων 
        showDatabaseSize();
    }

    //Ενημέρωση των label στο κάτω μέρος της οθόνης με το πλήθος των 
    //εγγραφών στους πίνακες της βάσης δεδομένων
    public void showDatabaseSize() {
        List<Country> countriesStored = Controller.getInstance().selectAllCountries();
        List<Coviddata> covidDataStored = Controller.getInstance().selectAllCovidData();
        jLabel2.setText("Χώρες αποθηκευμένες στη βάση δεδομένων: " + countriesStored.size());
        jLabel3.setText("Εγγραφές στοιχείων Covid19 στη βάση δεδομένων: " + covidDataStored.size());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);

        jLabel1.setText("jLabel1");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {}));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jButton1.setText("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("jButton2");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("jButton3");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("jButton4");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("jButton5");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel2.setText("jLabel2");

        jLabel3.setText("jLabel3");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(39, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(49, 49, 49)
                .addComponent(jButton1)
                .addGap(33, 33, 33)
                .addComponent(jButton2)
                .addGap(33, 33, 33)
                .addComponent(jButton3)
                .addGap(33, 33, 33)
                .addComponent(jButton4)
                .addGap(29, 29, 29)
                .addComponent(jButton5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addGap(30, 30, 30))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //Επιλογή στοιχείου στο comboBox
    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        //Όταν επιλέγεται ένας τύπος δεδομένων στο jComboBox1 ενημερώνεται κατάλληλα
        //το πεδίο timeSeries της φόρμας με τον επιλεγμένο τύπο δεδομένων       
        if (jComboBox1.getSelectedIndex() != -1) {
            //Ο τύπος δεδομένων που έχει επιλεγεί                    
            timeSeries = jComboBox1.getSelectedItem().toString();
        }
    }//GEN-LAST:event_jComboBox1ActionPerformed

    //Πάτημα πλήκτρου "Εισαγωγή χωρών"
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
     
        String json = null;
        
        json = Controller.getInstance().importAllCountries(timeSeries);
        
        //Εφόσον συνδέθηκε στο api και πήρε το json
        if (json != null) {
            //αποθηκεύουμε το json στο κατάλληλο πεδίο (jsonDeaths, jsonRecovered, jsonConfirmed)
            //ανάλογα με τον τύπο του
            if (timeSeries.equals("deaths")) {
                jsonDeaths = json;
            } else if (timeSeries.equals("recovered")) {
                jsonRecovered = json;
            } else {
                jsonConfirmed = json;
            }
            //Ενημερώνουμε τα label που μας δείχνουν το πλήθος εγγραφών της βάσης
            showDatabaseSize();
            //Μήνυμα ολοκλήρωσης εισαγωγής χωρών
            JOptionPane.showMessageDialog(null, "Η εισαγωγή χωρών από τη χρονοσειρά " + timeSeries
                    + " που δεν υπάρχουν ήδη στη βάση δεδομένων ολοκληρώθηκε",
                    "Μήνυμα", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    //Πάτημα πλήκτρου "Εισαγωγή δεδομένων"
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        
                
        String json = null;
        //Πρώτα γίνεται αποθήκευση στη βάση δεδομένων όλων των χωρών που υπάρχουν στο api 
        //και δεν υπάρχουν ήδη στη βάση μας, όπως και στο πάτημα του πλήκτρου "Εισαγωγή χωρών"
        json = Controller.getInstance().importAllCountries(timeSeries);
        
        if (json == null) {
            return;
        }
        short dataKind;
        if (timeSeries.equals("deaths")) {
            jsonDeaths = json;
            dataKind = 1;
        } else if (timeSeries.equals("recovered")) {
            jsonRecovered = json;
            dataKind = 2;
        } else {
            jsonConfirmed = json;
            dataKind = 3;
        }

         //παίρνουμε το κατάλληλο json ανάλογα με τον επιλεγμένο τύπο 
        if (timeSeries.equals("deaths")) {
            json = jsonDeaths;
        } else if (timeSeries.equals("recovered")) {
            json = jsonRecovered;
        } else {
            json = jsonConfirmed;
        }
        Controller.getInstance().storeCovidDataPerCountry(timeSeries,json);
        
        //Ενημερώνουμε τα label που μας δείχνουν το πλήθος εγγραφών της βάσης
        showDatabaseSize();
        //Μήνυμα ολοκλήρωσης εισαγωγής δεδομένων των χωρών
        JOptionPane.showMessageDialog(null, "Η εισαγωγή δεδομένων τύπου " + timeSeries
                + " που δεν υπάρχουν ήδη στη βάση δεδομένων ολοκληρώθηκε",
                "Μήνυμα", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jButton2ActionPerformed

    //Πάτημα πλήκτρου "Διαγραφή δεδομένων"
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        //Ο επιλεγμένος τύπος δεδομένων
        short dataKind;
        if (timeSeries.equals("deaths")) {
            dataKind = 1;
        } else if (timeSeries.equals("recovered")) {
            dataKind = 2;
        } else {
            dataKind = 3;
        }
        //Εμφάνιση πλαισίου διαλόγου με ερώτηση για διαγραφή δεδομένων
        int answer = JOptionPane.showConfirmDialog(null, "Διαγραφή όλων των δεδομένων από την χρονοσειρά " + timeSeries + ";", "Διαγραφή δεδομένων χρονοσειράς " + timeSeries, JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
        //Αν πατηθεί το πλήκτρο OK
        if (answer == JOptionPane.OK_OPTION) {
            //Γίνεται διαγραφή από την βάση όλων των δεδομένων του επιλεγμένου τύπου
            Controller.getInstance().deleteCovidDataOfKind(dataKind);
            //Επιπλέον πάιρνουμε όλα τα αποθηκευμένα δεδομένα covid19
            List<Coviddata> allCovidData = Controller.getInstance().selectAllCovidData();
            //Διατρέχουμε όλες αποθηκευμένες χώρες
            for (Country c : Controller.getInstance().selectAllCountries()) {
                //Διαγράφουμε για κάθε χώρα την λίστα με τα δεδομένα covid19 που είχε πριν την διαγραφή 
                c.getCoviddataList().clear();
                //Και ξανατοποθετούμε στη λίστα με τα δεδομένα covid19 της χώρας όλα τα δεδομένα 
                //που υπάρχουν τώρα στη βάση και αφορούν την συγκεκριμένη χώρα
                for (Coviddata d : allCovidData) {
                    if (d.getCountry().equals(c)) {
                        c.getCoviddataList().add(d);
                    }
                }
            }
            //Ενημερώνουμε τα label που μας δείχνουν το πλήθος εγγραφών της βάσης
            showDatabaseSize();
            //Μήνυμα ολοκλήρωσης διαγραφής δεδομένων
            JOptionPane.showMessageDialog(null, "Η διαγραφή δεδομένων τύπου " + timeSeries
                    + " ολοκληρώθηκε", "Μήνυμα", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    //Πάτημα πλήκτρου "Διαγραφή χωρών"
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        //Εμφάνιση πλαισίου διαλόγου με ερώτηση για διαγραφή χωρών
        int answer = JOptionPane.showConfirmDialog(null, "Διαγραφή όλων των χωρών που δεν περιέχουν δεδομένα;", "Διαγραφή χωρών", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
        //Αν πατηθεί το πλήκτρο OK
        if (answer == JOptionPane.OK_OPTION) {
           //ΣΧΟΛΙΟ 
            Controller.getInstance().deleteAllCountriesIfPossible();
           //Ενημερώνουμε τα label που μας δείχνουν το πλήθος εγγραφών της βάσης
            showDatabaseSize();
            //Μήνυμα ολοκλήρωσης διαγραφής χωρών που δεν περιέχουν δεδομένα
            JOptionPane.showMessageDialog(null, "Η διαγραφή των χωρών που δεν περιέχουν δεδομένα ολοκληρώθηκε", "Μήνυμα", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

//Πάτημα πλήκτρου "Επιστροφή"
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        //Απόκρυψη της φόρμας διαχείρισης δεδομένων
        this.setVisible(false);
        //Εμφάνιση της βασικής φόρμας
        mainForm.setVisible(true);
    }//GEN-LAST:event_jButton5ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    // End of variables declaration//GEN-END:variables
}
